import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_database/firebase_database.dart';
import 'package:flutter/services.dart';
import 'package:webview_flutter/webview_flutter.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  try {
    await Firebase.initializeApp(
      options: FirebaseOptions(
        appId: "1:763888345095:android:d69516cc06baf591f84aa2",
        apiKey: "AIzaSyAAB1caYC1mRcmvHmXcol6BQBUZc3OLY6E",
        messagingSenderId: "763888345095",
        projectId: "farmy-198d4",
        databaseURL: "https://farmy-198d4-default-rtdb.asia-southeast1.firebasedatabase.app",
        storageBucket: "farmy-198d4.appspot.com",
      ),
    );
    print("Firebase initialized successfully.");
  } catch (e) {
    print("Firebase initialization error: $e");
  }
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'FERMY',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        primaryColor: const Color(0xFF006400),
        scaffoldBackgroundColor: Colors.white,
        appBarTheme: const AppBarTheme(
          backgroundColor: Colors.white,
          elevation: 0,
        ),
      ),
      home: const SplashScreen(),
    );
  }
}

class SplashScreen extends StatefulWidget {
  const SplashScreen({Key? key}) : super(key: key);

  @override
  State<SplashScreen> createState() => _SplashScreenState();
}

class _SplashScreenState extends State<SplashScreen> {
  @override
  void initState() {
    super.initState();
    _checkConnection();
  }

  Future<void> _checkConnection() async {
    // Simulate a delay for the splash screen
    await Future.delayed(const Duration(seconds: 2));

    // Check device status from Firebase
    final databaseRef = FirebaseDatabase.instance.ref().child('device/status');
    final statusSnapshot = await databaseRef.get();
    String? status = statusSnapshot.value as String?;

    if (mounted) {
      // Navigate to the appropriate screen based on device status
      if (status == "on") {
        Navigator.of(context).pushReplacement(
          MaterialPageRoute(builder: (context) => const HomeScreen()),
        );
      } else {
        Navigator.of(context).pushReplacement(
          MaterialPageRoute(builder: (context) => const DeviceOffScreen()),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return const Scaffold(
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              'FERMY',
              style: TextStyle(
                color: Color(0xFF006400),
                fontSize: 48,
                fontWeight: FontWeight.bold,
              ),
            ),
            SizedBox(height: 24),
            CircularProgressIndicator(
              valueColor: AlwaysStoppedAnimation<Color>(Color(0xFF006400)),
            ),
            SizedBox(height: 24),
            Text('Connecting to your device...'),
          ],
        ),
      ),
    );
  }
}

class HomeScreen extends StatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  @override
  Widget build(BuildContext context) {
    return _buildDeviceOffView();
  }


  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  bool _isDeviceOn = false;
  final Map<String, dynamic> _latestData = {
    'animal': {'status': 'NO Detection', 'timestamp': null},
    'bird': {'status': 'NO Detection', 'timestamp': null},
    'fire': {'status': 'NO Detection', 'timestamp': null},
    'moisture': {'level': 77, 'timestamp': null},
  };
  final List<Map<String, dynamic>> _notifications = [];

  @override
  void initState() {
    super.initState();
    _initializeData();
  }

  void _initializeData() {
    final databaseRef = FirebaseDatabase.instance.ref().child('device/status');

    databaseRef.onValue.listen((event) {
      String? status = event.snapshot.value as String?;
      setState(() {
        _isDeviceOn = (status == "on"); // Show dashboard only if device is ON
      });
    });

    // Listen for agriculture data
    final dataRef = FirebaseDatabase.instance.ref().child('agriculture_data');
    dataRef.onChildAdded.listen((event) {
      var snapshot = event.snapshot;
      _processNewData(snapshot.value as Map<String, dynamic>);
    });
  }

  void _processNewData(Map<String, dynamic> data) {
    if (data['data'] != null) {
      setState(() {
        // Update latest data
        if (data['data']['detected_objects'] != null) {
          List<dynamic> objects = data['data']['detected_objects'];

          if (objects.contains('bird')) {
            _latestData['bird'] = {
              'status': 'Detected',
              'timestamp': data['timestamp'],
            };
            _addNotification('Bird detected in your field!', data['timestamp']);
          }

          if (objects.any((obj) => ['cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe'].contains(obj))) {
            _latestData['animal'] = {
              'status': 'Detected',
              'timestamp': data['timestamp'],
            };
            _addNotification('Animal detected in your field!', data['timestamp']);
          }
        }

        if (data['data']['fire_detected'] == true) {
          _latestData['fire'] = {
            'status': 'Detected',
            'timestamp': data['timestamp'],
          };
          _addNotification('FIRE detected in your field!', data['timestamp'], isUrgent: true);
        }

        if (data['data']['moisture_level'] != null) {
          _latestData['moisture'] = {
            'level': data['data']['moisture_level'],
            'timestamp': data['timestamp'],
          };

          if (data['data']['moisture_alert'] == true) {
            _addNotification('Low moisture level detected!', data['timestamp']);
          }
        }
      });
    }
  }

  void _addNotification(String message, String timestamp, {bool isUrgent = false}) {
    setState(() {
      _notifications.insert(0, {
        'message': message,
        'timestamp': timestamp,
        'isUrgent': isUrgent,
        'isRead': false,
      });
    });
  }

  void _openVideoStream() {
    Navigator.push(
      context,
      MaterialPageRoute(builder: (context) => const VideoStreamScreen()),
    );
  }

  void _openNotifications() {
    Navigator.push(
      context,
      MaterialPageRoute(builder: (context) => NotificationsScreen(notifications: _notifications)),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          'FERMY',
          style: TextStyle(
            color: Color(0xFF006400),
            fontSize: 32,
            fontWeight: FontWeight.bold,
          ),
        ),
        actions: [
          IconButton(
            icon: const Icon(Icons.videocam, color: Colors.black),
            onPressed: _openVideoStream,
          ),
          IconButton(
            icon: const Icon(Icons.notifications, color: Colors.black),
            onPressed: _openNotifications,
          ),
        ],
      ),
      body: _isDeviceOn ? _buildDeviceOnView() : _buildDeviceOffView(),
    );
  }

  Widget _buildDeviceOnView() {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        children: [
          _buildStatusCard(
            title: 'Animal',
            status: _latestData['animal']['status'],
            icon: Icons.pets,
            iconPath: 'assets/icons/paw.png',
          ),
          const SizedBox(height: 16),
          _buildStatusCard(
            title: 'BIRD',
            status: _latestData['bird']['status'],
            icon: Icons.flutter_dash,
            iconPath: 'assets/icons/bird.png',
          ),
          const SizedBox(height: 16),
          _buildStatusCard(
            title: 'FIRE',
            status: _latestData['fire']['status'],
            icon: Icons.local_fire_department,
            iconPath: 'assets/icons/fire.png',
          ),
          const SizedBox(height: 16),
          _buildMoistureCard(level: (_latestData['moisture']['level'] as num).toDouble()),
        ],
      ),
    );
  }

  Widget _buildDeviceOffView() {
    return Scaffold(
      appBar: AppBar(
        title: Text('Device Status'),
        centerTitle: true,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              // Animated power-off icon
              AnimatedIconPulse(
                child: Icon(Icons.power_off, size: 48, color: Colors.red),
              ),
              SizedBox(height: 16),
              Text(
                'Device is not turned on',
                style: TextStyle(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                ),
                textAlign: TextAlign.center,
              ),
              SizedBox(height: 8),
              Text(
                'Please check the power connection or try restarting the device.',
                style: TextStyle(
                  fontSize: 16,
                  color: Colors.grey[600],
                ),
                textAlign: TextAlign.center,
              ),
              SizedBox(height: 24),
              ElevatedButton(
                onPressed: () {
                  // Placeholder for power-on logic
                  print("Power On Button Pressed");
                },
                child: Text('Power On'),
              ),
            ],
          ),
        ),
      ),
      bottomNavigationBar: BottomNavigationBar(
        items: const [
          BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Home'),
          BottomNavigationBarItem(icon: Icon(Icons.settings), label: 'Settings'),
        ],
      ),
    );
  }
}

// Custom widget for pulsating animation
class AnimatedIconPulse extends StatefulWidget {
  final Widget child;

  const AnimatedIconPulse({Key? key, required this.child}) : super(key: key);

  @override
  _AnimatedIconPulseState createState() => _AnimatedIconPulseState();
}

class _AnimatedIconPulseState extends State<AnimatedIconPulse>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _animation;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(seconds: 1),
      vsync: this,
    )..repeat(reverse: true);

    _animation = Tween<double>(begin: 1.0, end: 1.2).animate(_controller);
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return ScaleTransition(
      scale: _animation,
      child: widget.child,
    );
  }
}
  Widget _buildStatusCard({required String title, required String status, required IconData icon, required String iconPath}) {
    bool isDetected = status.toLowerCase() != 'no detection';
    return Card(
      elevation: 2,
      color: const Color(0xFFBEAFAF), // Light brown/gray color as in your UI
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  title,
                  style: const TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  status,
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: isDetected ? FontWeight.bold : FontWeight.normal,
                    color: isDetected ? Colors.red : Colors.black,
                  ),
                ),
              ],
            ),
            Image.asset(
              iconPath,
              height: 50,
              width: 50,
              // Fallback to icons if image assets are not available
              errorBuilder: (context, error, stackTrace) {
                return Icon(icon, size: 50);
              },
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildMoistureCard({required double level}) {
    return Card(
      elevation: 2,
      color: const Color(0xFFBEAFAF), // Light brown/gray color as in your UI
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  'Soil Moisture',
                  style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  level.toStringAsFixed(0),
                  style: const TextStyle(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
            Image.asset(
              'assets/icons/moisture.png',
              height: 60,
              width: 60,
              // Fallback to icons if image assets are not available
              errorBuilder: (context, error, stackTrace) {
                return const Icon(Icons.water_drop, size: 60);
              },
            ),
          ],
        ),
      ),
    );
  }
}

class DeviceOffScreen extends StatefulWidget {
  const DeviceOffScreen({Key? key}) : super(key: key);

  @override
  State<DeviceOffScreen> createState() => _DeviceOffScreenState();
}

class _DeviceOffScreenState extends State<DeviceOffScreen> {
  int _selectedIndex = 0;

  static final List<Widget> _screens = [
    const DeviceOffMessage(), // Main screen for device off
    const AlertHistory(), // Alert history screen
    const Settings(), // Settings screen
  ];

  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: _screens[_selectedIndex],
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: _selectedIndex,
        onTap: _onItemTapped,
        selectedItemColor: const Color(0xFF006400), // Dark green color
        unselectedItemColor: Colors.grey,
        items: const <BottomNavigationBarItem>[
          BottomNavigationBarItem(
            icon: Icon(Icons.home),
            label: 'Home',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.history),
            label: 'Alerts',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.settings),
            label: 'Settings',
          ),
        ],
      ),
    );
  }
}

class DeviceOffMessage extends StatelessWidget {
  const DeviceOffMessage({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          const Icon(
            Icons.warning,
            size: 100,
            color: Colors.red,
          ),
          const SizedBox(height: 20),
          const Text(
            'Device is not turned on',
            style: TextStyle(
              fontSize: 24,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 20),
          ElevatedButton(
            onPressed: () {
              // Retry connecting to the device
              Navigator.of(context).pushReplacement(
                MaterialPageRoute(builder: (context) => const SplashScreen()),
              );
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: const Color(0xFF006400),
              padding: const EdgeInsets.symmetric(horizontal: 32, vertical: 16),
            ),
            child: const Text(
              'Retry',
              style: TextStyle(fontSize: 18, color: Colors.white),
            ),
          ),
        ],
      ),
    );
  }
}

class AlertHistory extends StatelessWidget {
  const AlertHistory({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final databaseRef = FirebaseDatabase.instance.ref();
    return Scaffold(
      appBar: AppBar(
        title: const Text("Alert History"),
        backgroundColor: const Color(0xFF006400),
      ),
      body: StreamBuilder(
        stream: databaseRef.child('/alerts').onValue,
        builder: (context, snapshot) {
          if (snapshot.hasData) {
            final data = snapshot.data!.snapshot.value as Map?;
            if (data == null) return const Center(child: Text("No alerts yet."));
            return ListView.builder(
              itemCount: data.length,
              itemBuilder: (context, index) {
                final key = data.keys.elementAt(index);
                final alert = data[key];
                return ListTile(
                  title: Text(alert['type']),
                  subtitle: Text(alert['timestamp']),
                  tileColor: alert['type'] == 'Fire' ? Colors.red[100] : Colors.green[100],
                  onTap: () {
                    showDialog(
                      context: context,
                      builder: (context) => AlertDialog(
                        title: Text(alert['type']),
                        content: Text(alert['timestamp']),
                      ),
                    );
                  },
                );
              },
            );
          }
          return const Center(child: CircularProgressIndicator());
        },
      ),
    );
  }
}

class Settings extends StatefulWidget {
  const Settings({Key? key}) : super(key: key);

  @override
  State<Settings> createState() => _SettingsState();
}

class _SettingsState extends State<Settings> {
  final databaseRef = FirebaseDatabase.instance.ref();
  double _soilMoistureThreshold = 30.0;
  bool _enableFireAlerts = true;
  bool _enableAnimalAlerts = true;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("Settings"),
        backgroundColor: const Color(0xFF006400),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text("Soil Moisture Threshold", style: TextStyle(fontSize: 18)),
            Slider(
              value: _soilMoistureThreshold,
              min: 0,
              max: 100,
              divisions: 100,
              label: "${_soilMoistureThreshold.toInt()}%",
              onChanged: (value) {
                setState(() {
                  _soilMoistureThreshold = value;
                });
                databaseRef.child('/settings').update({'soil_moisture_threshold': value});
              },
            ),
            Text("$_soilMoistureThreshold%"),
            const Divider(),
            SwitchListTile(
              title: const Text("Enable Fire Alerts"),
              value: _enableFireAlerts,
              onChanged: (value) {
                setState(() {
                  _enableFireAlerts = value;
                });
                databaseRef.child('/settings').update({'enable_fire_alerts': value});
              },
            ),
            SwitchListTile(
              title: const Text("Enable Animal Alerts"),
              value: _enableAnimalAlerts,
              onChanged: (value) {
                setState(() {
                  _enableAnimalAlerts = value;
                });
                databaseRef.child('/settings').update({'enable_animal_alerts': value});
              },
            ),
          ],
        ),
      ),
    );
  }
}

class VideoStreamScreen extends StatefulWidget {
  const VideoStreamScreen({Key? key}) : super(key: key);

  @override
  State<VideoStreamScreen> createState() => _VideoStreamScreenState();
}

class _VideoStreamScreenState extends State<VideoStreamScreen> {
  bool isLoading = true;
  bool _isDeviceOn = false;

  @override
  void initState() {
    super.initState();
    _checkDeviceStatus();
  }

  void _checkDeviceStatus() async {
    final databaseRef = FirebaseDatabase.instance.ref().child('device/status');
    final statusSnapshot = await databaseRef.get();
    String? status = statusSnapshot.value as String?;

    if (mounted) {
      setState(() {
        _isDeviceOn = (status == "on");
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          'Live Camera',
          style: TextStyle(
            color: Color(0xFF006400),
            fontWeight: FontWeight.bold,
          ),
        ),
        iconTheme: const IconThemeData(color: Color(0xFF006400)),
      ),
      body: _isDeviceOn
          ? Column(
        children: [
          if (isLoading)
            const LinearProgressIndicator(
              valueColor: AlwaysStoppedAnimation<Color>(Color(0xFF006400)),
            ),
          Expanded(
            child: WebViewWidget(
              controller: WebViewController()
                ..setJavaScriptMode(JavaScriptMode.unrestricted)
                ..setNavigationDelegate(
                  NavigationDelegate(
                    onPageFinished: (String url) {
                      setState(() {
                        isLoading = false;
                      });
                    },
                  ),
                )
                ..loadRequest(Uri.parse('http://your-raspberry-pi-ip:8000/stream')),
            ),
          ),
        ],
      )
          : const Center(
        child: Text(
          'Camera Not Detected',
          style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
        ),
      ),
    );
  }
}

class NotificationsScreen extends StatelessWidget {
  final List<Map<String, dynamic>> notifications;

  const NotificationsScreen({Key? key, required this.notifications}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          'Notifications',
          style: TextStyle(
            color: Color(0xFF006400),
            fontWeight: FontWeight.bold,
          ),
        ),
        iconTheme: const IconThemeData(color: Color(0xFF006400)),
      ),
      body: notifications.isEmpty
          ? const Center(child: Text('No notifications yet.'))
          : ListView.builder(
        itemCount: notifications.length,
        itemBuilder: (context, index) {
          final notification = notifications[index];
          return Card(
            margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
            color: notification['isUrgent'] ? const Color(0xFFFFDEDE) : Colors.white,
            child: ListTile(
              leading: Icon(
                notification['isUrgent'] ? Icons.warning : Icons.notifications,
                color: notification['isUrgent'] ? Colors.red : const Color(0xFF006400),
              ),
              title: Text(notification['message']),
              subtitle: Text(notification['timestamp']),
            ),
          );
        },
      ),
    );
  }
}